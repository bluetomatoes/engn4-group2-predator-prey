function sine-wave-prey((,Frmax,Fymax,amiapredator,pr,vr,py,vy)
distance= sqrt((py(1)-pr(1))^2+(py(2)-pr(2))^2);
    if t==0
        F=Fymax*[0;1];
    elseif(py(2)<100)
        F=Fymax*[0;1];
    elseif(distance>100)
        F=Fymax*[-1*cos(t/20);1];
    elseif distance<100
        F=Fymax*[-1*vr(2)/sqrt(vr(2)^2+vr(1)^2);-1*abs(vr(1)/sqrt(vr(2)^2+vr(1)^2))];
end

----------------------------------------------------------------------------------------------------------------

function circle-prey(t,Frmax,Fymax,amiapredator,pr,vr,py,vy)
istance= sqrt((py(1)-pr(1))^2+(py(2)-pr(2))^2);
    if(t>0)
        if(py(2)<50)
            F=Fymax*[0;1];
        else
            if(distance>100)
            F=Fymax*[-1*cos(t/20);sin(t/20)+.75]
            else
            F=Fymax*[-1*vr(2)/sqrt(vr(2)^2+vr(1)^2);-1*abs(vr(1)/sqrt(vr(2)^2+vr(1)^2))];  
            
            end 
        
        end
    else 
    F=Fymax*[0;1];
end
----------------------------------------------------------------------------------------------------------

function perpendicular_prey(t,Frmax,Fymax,amiapredator,pr,vr,py,vy)

end

-------------------------------------------------------------------------------------------------------------

function low_prey(t,Frmax,Fymax,amiapredator,pr,vr,py,vy)
 if(t>0)
        if(py(2)<30) && norm(vy(2)) > 2
            F = Fymax*-vy(2);
        elseif py(2)<30
            F = 50*(8-py(2))*[0;1] + 5*[1;0];
        elseif py(2)<10 && norm(vy(2)) > 2
            F = 50*(8-py(2))*[0;1] + 100*[1;0];
        elseif py(2)<10
            F = 10*(8-py(2))*[0;1] + 200*[1;0];
        else
            F = Fymax*[0;-1];
        end
    else 
    F=Fymax*[0;-1];
    
    end
end
