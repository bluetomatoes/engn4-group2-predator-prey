function sine-wave-prey((,Frmax,Fymax,amiapredator,pr,vr,py,vy)
distance= sqrt((py(1)-pr(1))^2+(py(2)-pr(2))^2);
    if t==0
        F=Fymax*[0;1];
    elseif(py(2)<100)
        F=Fymax*[0;1];
    elseif(distance>100)
        F=Fymax*[-1*cos(t/20);1];
    elseif distance<100
        F=Fymax*[-1*vr(2)/sqrt(vr(2)^2+vr(1)^2);-1*abs(vr(1)/sqrt(vr(2)^2+vr(1)^2))];
end

----------------------------------------------------------------------------------------------------------------

function circle-prey(t,Frmax,Fymax,amiapredator,pr,vr,py,vy)
istance= sqrt((py(1)-pr(1))^2+(py(2)-pr(2))^2);
    if(t>0)
        if(py(2)<50)
            F=Fymax*[0;1];
        else
            if(distance>100)
            F=Fymax*[-1*cos(t/20);sin(t/20)+.75]
            else
            F=Fymax*[-1*vr(2)/sqrt(vr(2)^2+vr(1)^2);-1*abs(vr(1)/sqrt(vr(2)^2+vr(1)^2))];  
            
            end 
        
        end
    else 
    F=Fymax*[0;1];
end
----------------------------------------------------------------------------------------------------------

function perpendicular_prey(t,Frmax,Fymax,amiapredator,pr,vr,py,vy)

end

-------------------------------------------------------------------------------------------------------------

function low_prey(t,Frmax,Fymax,amiapredator,pr,vr,py,vy)
 if(t>0)
        if(py(2)<30) && norm(vy(2)) > 2
            F = Fymax*-vy(2);
        elseif py(2)<30
            F = 50*(8-py(2))*[0;1] + 5*[1;0];
        elseif py(2)<10 && norm(vy(2)) > 2
            F = 50*(8-py(2))*[0;1] + 100*[1;0];
        elseif py(2)<10
            F = 10*(8-py(2))*[0;1] + 200*[1;0];
        else
            F = Fymax*[0;-1];
        end
    else 
    F=Fymax*[0;-1];
    
    end
end
-----------------------------------------------------------------------------------------------------------------
function gen_pred(t,Frmax,Fymax,amiapredator,pr,vr,py,vy)
distance = sqrt((pr(1)-py(1))^2 + (pr(2)-py(2))^2);
velocity_relative = vr - vy;
distance_apart = pr - py;
time_to_catch = norm(distance_apart)/norm(velocity_relative);
predicted_py = py + vy*(time_to_catch/3);
dist_between = predicted_py - pr;
angle = dist_between/norm(dist_between); 

    if t == 0
        F = Frmax*[1;0];
    elseif pr(2) < 100
        if distance < 20 && norm(vr) > norm(vy+15)
            F = Frmax*-vr;
        elseif distance < 20
            F = Frmax*((py-pr)/norm(py-pr));
        elseif norm(vr(2)) > 10
            F = Frmax*-vr; 
        elseif pr(2) < 10 && norm(vr(2)) > 1
            F = Frmax*-vr(2);
        else
            %If predator is in just out of line with low prey, change the 
            %number that is being added to py(2) accordingly.
            F = 100*((py(2)+10)-pr(2))*[0;1] + Frmax*[angle(1);angle(2)];
        end
    elseif distance > 60
        F = Frmax*[angle(1);angle(2)];
    elseif distance < 60
        if distance < 40
            F = Frmax*((py-pr)/norm(py-pr));
        elseif norm(vr) > norm(vy+15)
            F = Frmax*-vr;
        else
            F = Frmax*[angle(1);angle(2)];
        end
end        
